{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Business/Business.js","components/BusinessList/BusinessList.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["sortByOptions","SearchBar","props","state","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","this","setState","event","target","value","searchYelp","preventDefault","Object","keys","map","sortByOptionValue","className","getSortByClass","key","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","href","React","Component","Business","src","business","imageSrc","alt","name","address","zipCode","rating","reviewCount","BusinessList","businesses","id","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","image_url","address1","city","zip_code","category","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4f7b533.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css';\n\nconst sortByOptions = {\n                'Best Match': 'best_match',\n                'Highest Rated': 'rating',\n                'Most Reviewed': 'review_count',\n              };\n\nclass SearchBar extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = { term: '',\n                  location: '',\n                  sortBy: 'best_match', };\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  getSortByClass(sortByOption) {\n    if (this.state.sortBy === sortByOption) {\n      return 'active';\n    }else {\n      return '';\n    }\n  }\n\n  handleSortByChange(sortByOption) {\n    this.setState({ sortBy: sortByOption });\n  }\n\n  handleTermChange (event) {\n    this.setState({ term: event.target.value });\n  }\n\n  handleLocationChange(event) {\n    this.setState({ location: event.target.value });\n  }\n\n  handleSearch(event) {\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n    event.preventDefault();\n  }\n\n  renderSortByOptions() {\n    return Object.keys(sortByOptions).map(sortByOption=> {\n      let sortByOptionValue = sortByOptions[sortByOption];\n      return <li className={this.getSortByClass(sortByOptionValue)}\n       key={sortByOptionValue}\n        onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\n       {sortByOption} </li>;\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n  <div className=\"SearchBar-sort-options\">\n    <ul>\n    {this.renderSortByOptions() }\n    </ul>\n  </div>\n  <div className=\"SearchBar-fields\">\n    <input placeholder=\"Search Businesses\" onChange={this.handleTermChange} />\n    <input placeholder=\"Where?\" onChange={this.handleLocationChange} />\n  </div>\n  <div className=\"SearchBar-submit\">\n    <a href='www.#.com' onClick={this.handleSearch}>Let's Go</a>\n  </div>\n</div>\n);\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n  render() {\n    return (< div className = \"Business\" >\n        <\n        div className = \"image-container\" >\n        <\n        img src = {this.props.business.imageSrc}\n        alt = '' / >\n        <\n        /div> <\n        h2 > {this.props.business.name}< /h2> <\n        div className = \"Business-information\" >\n        <\n        div className = \"Business-address\" >\n        <\n        p > {this.props.business.address}< /p> <\n        p > Bordertown < /p> <\n        p >{this.props.business.state}{this.props.business.zipCode} < /p> <\n        /div> <\n        div className = \"Business-reviews\" >\n        <\n        h3 > ITALIAN < /h3> <\n        h3 className = \"rating\" > {this.props.business.rating} stars\n      } < /h3> <\n      p > {this.props.business.reviewCount} reviews < /p> <\n      /div> <\n      /div> <\n      /div>);\n  }\n}\n\nexport default Business;\n","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n  render() {\n    return (\n    <div className=\"BusinessList\">\n{\n  this.props.businesses.map((business) =>\n{return <Business business = {business} key = {business.id}/>;\n    }\n  )}\n  </div>);\n  }\n}\n\nexport default BusinessList;\n","// Client ID\n// sEptjHHbe1uaTP-ZLjas3Q\nconst apiKey = '4TG7fvAJxxse76NTi2g3MUDbllAM0J0bILOS6EVxdfbTtUEFSQqVfwDh4YgYG9-avDoB8TOjTEI7u1-xqax9NNfD9mRo7DM98sqJUy4gWfkyiy7vPi_k2i2KXXqOXXYx'\nconst Yelp = {\n  search(term, location, sortBy) {\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,{\n        headers: {\n            Authorization: `Bearer ${apiKey}`,\n              }\n      }).then(response=> {return response.json()}).then(jsonResponse=>{if\n        (jsonResponse.businesses) {\n        return jsonResponse.businesses.map(business=> {\n          console.log(business);\n          return {\n            id: business.id,\n            imageSrc: business.image_url,\n            name: business.name,\n            address: business.location.address1,\n            city: business.location.city,\n            state: business.location.state,\n            zipCode: business.location.zip_code,\n            category: business.categories[0].title,\n            rating: business.rating,\n            reviewCount: business.review_count,\n\n             }})}});}\n};\n\nexport default Yelp;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport BusinessList from '../BusinessList/BusinessList';\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = { businesses: [] };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses=> {this.setState({ businesses: businesses })});\n  }\n\n  render() {\n    return (\n    <div className=\"App\">\n      <h1>ravenous</h1>\n      < SearchBar searchYelp = {this.searchYelp}/>\n      < BusinessList businesses={this.state.businesses}/>\n    </div>\n  );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}